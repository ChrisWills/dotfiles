import XMonad
import XMonad.Util.EZConfig
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.UrgencyHook
import XMonad.Layout.WorkspaceDir
import XMonad.Layout.Accordion
import XMonad.Prompt (defaultXPConfig, XPConfig(..))
import XMonad.Prompt.Shell
import XMonad.Util.Run

import System.IO
import System.Posix.User
import Data.List (isPrefixOf)
import System.Posix.Env (setEnv)
import qualified XMonad.StackSet as W

myConfig xmobarPipe layoutHook =
  withUrgencyHook NoUrgencyHook defaultConfig
    {
      --terminal          = "~/.xmonad/gnome-terminal-wrapper --hide-menubar",
      terminal          = "xterm -e screen",
      focusFollowsMouse = False,
      workspaces        = myWorkspaces,
      layoutHook        = layoutHook,
      manageHook        = composeAll [ manageDocks ] <+> manageDocks,
      logHook           = dynamicLogWithPP $ xmobarPP {
                              ppOutput = hPutStrLn xmobarPipe,
                              ppTitle  = xmobarColor "green" "" . shorten 50,
                              ppOrder  = \(ws:l:t:_) -> [ws,l,t],
                              ppUrgent = xmobarColor "yellow" "red" . xmobarStrip
                            },
    normalBorderColor = mynormalBorderColor,
    focusedBorderColor = myfocusedBorderColor,
     modMask           = myModMask 
    } `removeKeysP` [("M-p")] `additionalKeysP` myKeys 

-- mod4Mask is Windows key, mod1Mask is alt

mynormalBorderColor = "#262626"
myfocusedBorderColor = "#9F6C3B"

myModMask = mod1Mask

myWorkspaces = map show $ [1 .. 9] ++ [0]

layoutPostProcess layout = avoidStruts $ workspaceDir "~" $ layout

myLayoutHook = 
  layoutPostProcess $
    tallLayout |||
    Mirror tallLayout |||
    Full
  where
    tallLayout = Tall 1 (3/100) (1/2)

runXmonad xmobarPipe = xmonad $ myConfig xmobarPipe myLayoutHook 

-- This is for those who commonly work on some rackmount and want a
-- key to open a terminal there.  Change rackmount to the rackmount 
-- of your choice.
rackmount = "nyc-qws-r09"

rackmountKey =
  [("M-S-m", spawn command)]
    where command =
            "xterm -e 'ssh -K -Y "
            ++ "nyc-qws-r30" ++ "'"

myKeys =
  {- bindings below are for both qwerty and dvorak -}
  [
    ("M-=", sendMessage Expand),
    ("M--", sendMessage Shrink),
    ("M-u", windows W.focusUp),
    ("M-i", windows W.focusDown),
    ("M-g", windows W.focusDown),
    ("M-c", windows W.focusUp),
    ("M-d", changeDir defaultXPConfig),
    ("M-S-r", shellPrompt defaultXPConfig),
    ("M-S-t", withFocused $ windows . W.sink),
    ("M-w", spawn "/j/nyc/app/firefox/bin/firefox"),
    ("M-p", spawn "xterm"),
    ("M-S-l", spawn "xscreensaver-command -l") ]
  ++
  rackmountKey 
  ++
  [ ("M-" ++ ws, windows $ W.greedyView ws) | ws <- myWorkspaces ]
  ++
  [ ("M-S-" ++ ws, windows $ W.shift ws) | ws <- myWorkspaces ]
  ++
  [ ("M-" ++ [key], screenWorkspace scr >>= flip whenJust (windows . W.view))
    | (key, scr)  <- zip "ht" [0,1] -- change to match your screen order
  ]
  ++
  [ ("M-" ++ [key], screenWorkspace scr >>= flip whenJust (windows . W.view))
    | (key, scr)  <- zip "jk" [0,1] -- change to match your screen order
  ]


setEnvironment = 
  -- Google's Chrome uses xdg-open to open saved files.
  -- xdg-open doesn't know about xmonad, so it feeds things to
  -- firefox.
  -- Hard-coding things to gnome
  setEnv "DE" "gnome" False

main =
  do
    setEnvironment
    spawn "xscreensaver -no-splash"
    xmobarPipe <- spawnPipe "xmobar ~/.xmonad/xmobarrc"
    runXmonad xmobarPipe 
